# THIS FILE IS AUTOGENERATED BY A JINJA TEMPLATE
# IN THE PARENT DIRECTORY!!

name: Build and Upload

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  pull_request:

permissions:
  contents: write

jobs:


  build-proto:  
    runs-on: ubuntu-latest
    container: xingrz/rpi-pico-builder:latest
    steps:

    - name: Install git
      run: |
        apt update
        apt install -y git
        
    - uses: actions/checkout@v3
      name: Clone Phobri repo
      with:
        submodules: true

    - name: Clone Pico SDK
      uses: suisei-cn/actions-download-file@v1
      id: pico-sdk
      with:
        url: https://codeload.github.com/raspberrypi/pico-sdk/tar.gz/refs/tags/1.5.1
        target: assets

    - name: Clone TinyUSB 
      uses: suisei-cn/actions-download-file@v1
      id: tinyusb
      with:
        url: https://codeload.github.com/hathach/tinyusb/tar.gz/refs/tags/0.15.0
        target: assets

    - name: Untar Pico SDK
      run: |
        tar xvf assets/${{ steps.pico-sdk.outputs.filename }} --transform 's/pico-sdk-1.5.1//' -C $PICO_SDK_PATH
        tar xvf assets/${{ steps.tinyusb.outputs.filename }} --transform 's/tinyusb-0.15.0//' -C $PICO_SDK_PATH/lib/tinyusb

    - name: Configure CMake
      run: cmake -B build -DCMAKE_C_FLAGS=-DHW_PHOBRI_PROTO

    - name: Build
      # Build your program with the given configuration
      run: cmake --build build

    - name: Upload proto UF2
      uses: actions/upload-artifact@v3
      with:
        name: proto_uf2
        path: build/Phobri64.uf2
        if-no-files-found: error

  build-v1_X_3d:  
    runs-on: ubuntu-latest
    container: xingrz/rpi-pico-builder:latest
    steps:

    - name: Install git
      run: |
        apt update
        apt install -y git
        
    - uses: actions/checkout@v3
      name: Clone Phobri repo
      with:
        submodules: true

    - name: Clone Pico SDK
      uses: suisei-cn/actions-download-file@v1
      id: pico-sdk
      with:
        url: https://codeload.github.com/raspberrypi/pico-sdk/tar.gz/refs/tags/1.5.1
        target: assets

    - name: Clone TinyUSB 
      uses: suisei-cn/actions-download-file@v1
      id: tinyusb
      with:
        url: https://codeload.github.com/hathach/tinyusb/tar.gz/refs/tags/0.15.0
        target: assets

    - name: Untar Pico SDK
      run: |
        tar xvf assets/${{ steps.pico-sdk.outputs.filename }} --transform 's/pico-sdk-1.5.1//' -C $PICO_SDK_PATH
        tar xvf assets/${{ steps.tinyusb.outputs.filename }} --transform 's/tinyusb-0.15.0//' -C $PICO_SDK_PATH/lib/tinyusb

    - name: Configure CMake
      run: cmake -B build -DCMAKE_C_FLAGS=-DHW_PHOBRI_V1_X_3D

    - name: Build
      # Build your program with the given configuration
      run: cmake --build build

    - name: Upload v1_X_3d UF2
      uses: actions/upload-artifact@v3
      with:
        name: v1_X_3d_uf2
        path: build/Phobri64.uf2
        if-no-files-found: error

  build-v1_X_analog:  
    runs-on: ubuntu-latest
    container: xingrz/rpi-pico-builder:latest
    steps:

    - name: Install git
      run: |
        apt update
        apt install -y git
        
    - uses: actions/checkout@v3
      name: Clone Phobri repo
      with:
        submodules: true

    - name: Clone Pico SDK
      uses: suisei-cn/actions-download-file@v1
      id: pico-sdk
      with:
        url: https://codeload.github.com/raspberrypi/pico-sdk/tar.gz/refs/tags/1.5.1
        target: assets

    - name: Clone TinyUSB 
      uses: suisei-cn/actions-download-file@v1
      id: tinyusb
      with:
        url: https://codeload.github.com/hathach/tinyusb/tar.gz/refs/tags/0.15.0
        target: assets

    - name: Untar Pico SDK
      run: |
        tar xvf assets/${{ steps.pico-sdk.outputs.filename }} --transform 's/pico-sdk-1.5.1//' -C $PICO_SDK_PATH
        tar xvf assets/${{ steps.tinyusb.outputs.filename }} --transform 's/tinyusb-0.15.0//' -C $PICO_SDK_PATH/lib/tinyusb

    - name: Configure CMake
      run: cmake -B build -DCMAKE_C_FLAGS=-DHW_PHOBRI_V1_X_ANALOG

    - name: Build
      # Build your program with the given configuration
      run: cmake --build build

    - name: Upload v1_X_analog UF2
      uses: actions/upload-artifact@v3
      with:
        name: v1_X_analog_uf2
        path: build/Phobri64.uf2
        if-no-files-found: error


  deploy:
    runs-on: ubuntu-latest
    needs:

      - build-proto

      - build-v1_X_3d

      - build-v1_X_analog

    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
        name: Clone Phobri repo

      - uses: actions/download-artifact@v3
        name: Download UF2s

      - name: Move around files
        run: |
        
          mv proto_uf2/Phobri64.uf2 ./Phobri64_${{ github.ref_name }}_proto.uf2
        
          mv v1_X_3d_uf2/Phobri64.uf2 ./Phobri64_${{ github.ref_name }}_v1_X_3d.uf2
        
          mv v1_X_analog_uf2/Phobri64.uf2 ./Phobri64_${{ github.ref_name }}_v1_X_analog.uf2
        

      - name: Push to release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
            files: |
              Phobri64_${{ github.ref_name }}_proto.uf2
              Phobri64_${{ github.ref_name }}_v1_X_3d.uf2
              Phobri64_${{ github.ref_name }}_v1_X_analog.uf2
              